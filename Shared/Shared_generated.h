// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SHARED_H_
#define FLATBUFFERS_GENERATED_SHARED_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

struct FCG_Login;
struct FCG_LoginBuilder;

struct FGC_Login;
struct FGC_LoginBuilder;

struct FCG_Ping;
struct FCG_PingBuilder;

struct FGC_Pong;
struct FGC_PongBuilder;

struct FCG_Login FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FCG_LoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_PWD = 6
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *pwd() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PWD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_PWD) &&
           verifier.VerifyString(pwd()) &&
           verifier.EndTable();
  }
};

struct FCG_LoginBuilder {
  typedef FCG_Login Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(FCG_Login::VT_NAME, name);
  }
  void add_pwd(::flatbuffers::Offset<::flatbuffers::String> pwd) {
    fbb_.AddOffset(FCG_Login::VT_PWD, pwd);
  }
  explicit FCG_LoginBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FCG_Login> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FCG_Login>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FCG_Login> CreateFCG_Login(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> pwd = 0) {
  FCG_LoginBuilder builder_(_fbb);
  builder_.add_pwd(pwd);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FCG_Login> CreateFCG_LoginDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *pwd = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto pwd__ = pwd ? _fbb.CreateString(pwd) : 0;
  return CreateFCG_Login(
      _fbb,
      name__,
      pwd__);
}

struct FGC_Login FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FGC_LoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_PWD = 6
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *pwd() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PWD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_PWD) &&
           verifier.VerifyString(pwd()) &&
           verifier.EndTable();
  }
};

struct FGC_LoginBuilder {
  typedef FGC_Login Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(FGC_Login::VT_NAME, name);
  }
  void add_pwd(::flatbuffers::Offset<::flatbuffers::String> pwd) {
    fbb_.AddOffset(FGC_Login::VT_PWD, pwd);
  }
  explicit FGC_LoginBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FGC_Login> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FGC_Login>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FGC_Login> CreateFGC_Login(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> pwd = 0) {
  FGC_LoginBuilder builder_(_fbb);
  builder_.add_pwd(pwd);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FGC_Login> CreateFGC_LoginDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *pwd = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto pwd__ = pwd ? _fbb.CreateString(pwd) : 0;
  return CreateFGC_Login(
      _fbb,
      name__,
      pwd__);
}

struct FCG_Ping FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FCG_PingBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct FCG_PingBuilder {
  typedef FCG_Ping Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(FCG_Ping::VT_DATA, data);
  }
  explicit FCG_PingBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FCG_Ping> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FCG_Ping>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FCG_Ping> CreateFCG_Ping(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0) {
  FCG_PingBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FCG_Ping> CreateFCG_PingDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return CreateFCG_Ping(
      _fbb,
      data__);
}

struct FGC_Pong FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FGC_PongBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct FGC_PongBuilder {
  typedef FGC_Pong Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(FGC_Pong::VT_DATA, data);
  }
  explicit FGC_PongBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FGC_Pong> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FGC_Pong>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FGC_Pong> CreateFGC_Pong(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0) {
  FGC_PongBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FGC_Pong> CreateFGC_PongDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return CreateFGC_Pong(
      _fbb,
      data__);
}

inline const FGC_Pong *GetFGC_Pong(const void *buf) {
  return ::flatbuffers::GetRoot<FGC_Pong>(buf);
}

inline const FGC_Pong *GetSizePrefixedFGC_Pong(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FGC_Pong>(buf);
}

inline bool VerifyFGC_PongBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FGC_Pong>(nullptr);
}

inline bool VerifySizePrefixedFGC_PongBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FGC_Pong>(nullptr);
}

inline void FinishFGC_PongBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FGC_Pong> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFGC_PongBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FGC_Pong> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_SHARED_H_
